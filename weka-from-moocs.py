
# coding: utf-8

# ###### Import JVM to run Java Virtual Machine for Weka

# In[1]:


import weka.core.jvm as jvm


# ###### Import Converter to load .arff files

# In[2]:


import weka.core.converters as conv


# ###### Import Evaluaiton and Classifier to use evaluation methods and different classifiers of Weka

# In[3]:


from weka.classifiers import Evaluation, Classifier


# ###### Import Random to seed the  cross-validation methods of Weka

# In[4]:


from weka.core.classes import Random


# ###### Import os to use Operating System's Environment Variable "MOOC_DATA" 

# In[5]:


import os


# ###### Starting Java Virtual Machine

# In[6]:


jvm.start(packages=True)


# ###### Loading anneal.arff file using Weka's load_any_file method

# In[7]:


data = conv.load_any_file(str(os.environ.get("MOOC_DATA"))+os.sep+"anneal.arff")
# or change it to data = conv.load_any_file("anneal.arff") if your code and dataset are in same folder

# ###### Setting last attribute of data as the class label

# In[8]:


data.class_is_last()


# ###### Instantiating Weka's J48 classifier

# In[9]:


cls = Classifier(classname="weka.classifiers.trees.J48", options=["-C","0.3"])


# ###### Evaluating data

# In[10]:


evl = Evaluation(data)


# ###### Cross Validating data with number of folds set to 10

# In[11]:


evl.crossvalidate_model(cls, data, 10, Random(1))


# ###### Printing output of the evaluation method

# In[12]:


print(evl.summary("J48 Summary", False))


# ###### Printing the confusion matrix generated by evaluation method

# In[13]:


print(evl.matrix())


# ###### Stopping the JVM as we don't need it now

# In[14]:


jvm.stop()

